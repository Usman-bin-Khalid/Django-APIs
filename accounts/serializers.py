from rest_framework import serializers
# Import the custom User model we created
from .models import User 
from django.contrib.auth.hashers import make_password

class UserSignupSerializer(serializers.ModelSerializer):
    """
    Serializer for handling user registration data.
    Ensures the password is hashed before saving.
    """
    # The password field is only for writing (input), never for reading (output)
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        # Define all the fields that the user must provide during signup
        fields = (
            'id', 
            'username', 
            'email', 
            'password', 
            'interest', 
            'dob', 
            'first_name', 
            'last_name', 
            'phone_number'
        )
        # The 'id' is generated by the database, so it's read-only
        read_only_fields = ('id',) 

    # Override the default ModelSerializer create method
    def create(self, validated_data):
        # 1. Take the raw password from validated_data and hash it
        validated_data['password'] = make_password(validated_data['password'])
        
        # 2. Call the parent class's create method to save the user with the hashed password
        user = super().create(validated_data)
        
        return user
